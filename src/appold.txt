import { CloudSnow } from 'lucide-react'
import './App.css'
//import { Button } from '@/components/ui/button'

import { useEffect, useMemo, useState } from 'react';

import { Bar, BarChart, CartesianGrid, Line, LineChart, XAxis, YAxis, ResponsiveContainer } from "recharts"
 
import { ChartConfig, ChartContainer } from "@/components/ui/chart"
import { ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { ChartLegend, ChartLegendContent } from "@/components/ui/chart"

import Papa from 'papaparse';

import Tab from './components/Tab/Tab';

interface Temp {
  date: string;
  value: number;
}


const fetchData = async () => {
  const response = await fetch('src/csv/20240730_temperature.csv');
  //console.log(response)
 /*  const reader = response.body.getReader();
  const result = await reader.read();
  const decoder = new TextDecoder('utf-8');
  const csv = decoder.decode(result.value); */
  const csv = await response.text();
 //const results = Papa.parse(csv, { header: true });
  const results = Papa.parse<Temp>(csv, {
    dynamicTyping: true,
    delimiter: ";",
    header: true,
    skipEmptyLines: true
  });
  console.log(results)
  return results.data;
};

 
const chartData = [
  { month: "January", desktop: 186, mobile: 80 },
  { month: "February", desktop: 305, mobile: 200 },
  { month: "March", desktop: 237, mobile: 120 },
  { month: "April", desktop: 73, mobile: 190 },
  { month: "May", desktop: 209, mobile: 130 },
  { month: "June", desktop: 214, mobile: 140 },
]
 
const chartConfig = {
  temp: {
    label: "Temperature",
    color: "#2563eb",
  },
} satisfies ChartConfig


interface TabData {
  title: string;
  value: string;
}

const tabs: TabData[] = [
  { title: 'Tab 2', value: 'tab2' },
  { title: 'Tab 3', value: 'tab3' },
];


const sampleData = (data: Temp[], sampleSize: number): Temp[] => {
  const step = Math.ceil(data.length / sampleSize);
  
  return data.filter((_, index) => index % step === 0);

};

function App() {

  const [activeTab, setActiveTab] = useState("tab2");
  const [loading, setLoading] = useState<boolean>(true);

   

  function handleTabClick(value: string) {
    setActiveTab(value);
  }

  const [data, setData] = useState<Temp[] | []>([]);

  // Memoize the dataset to prevent unnecessary recalculations
  const memoizedData = useMemo(() => data || [], [data]);

  const sampledData = useMemo(() => {
    const maxDataPoints = 1000; // Adjust this value based on performance needs
    return data.length > maxDataPoints ? sampleData(data, maxDataPoints) : data;
  }, [data]);

  useEffect(() => {
    fetchData()
      .then(data => setData(data))
      .catch(error => console.error(error))
      .finally(() => {
        setLoading(false);
      })
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-xl font-semibold">Loading data...</div>
      </div>
    );
  }

  return (
    <>
    <div className="min-h-screen flex flex-col bg-gray-200">
      <div className="w-full bg-white">
          <div className="flex px-2 py-4">
            <CloudSnow /> 
            <div className="ml-2">Station météo</div>
          </div>
      </div>

      <div className="w-full bg-white flex">

        {/* <Tab title={tab1.title} enable={activeTab === tab1.value} onClick={() => handleTabClick(tab1.value)}/>  */}

        {tabs.map((tab) => (
          <Tab
            key={tab.value}
            title={tab.title}
            enable={activeTab === tab.value}
            onClick={() => handleTabClick(tab.value)}
          />
        ))}

        {/* <div className="px-2 pb-4 pt-1 border-b-4 border-indigo-400">
          Précipitation
        </div>
        <div className="px-2 pb-4 pt-1">
          Température
        </div> */}
      </div>

      <div className="flex-grow flex justify-center items-center">
        <div className="p-4 bg-white w-full lg:w-4/6 rounded-xl">


        <ChartContainer config={chartConfig} className="h-full lg:h-[550px]  w-full">
          <LineChart accessibilityLayer 
            
            data={memoizedData}
            margin={{
              left: 12,
              right: 12,
            }}
          >
            
            <XAxis
              
              dataKey="date"
              tickMargin={8}
              //tickFormatter={(value) => value.slice(0, 4)}
            />
            <YAxis type="number"  />
            <ChartTooltip
              
              cursor={false}
              content={<ChartTooltipContent  />}
            />
            <ChartLegend content={<ChartLegendContent nameKey="temp" />} />
            <Line
              dataKey="value"
              type="linear"
              stroke="var(--color-temp)"
              strokeWidth={2}
              dot={false}
            />
          </LineChart>
        </ChartContainer>

          


       {/*  <ChartContainer config={chartConfig} className="min-h-[400px] w-full">
          <BarChart accessibilityLayer data={chartData}>
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey="month"
              tickLine={false}
              tickMargin={10}
              axisLine={false}
              tickFormatter={(value) => value.slice(0, 3)}
            />
            <ChartTooltip content={<ChartTooltipContent />} />
            <ChartLegend content={<ChartLegendContent />} />
            <Bar dataKey="desktop" fill="var(--color-desktop)" radius={4} />
            <Bar dataKey="mobile" fill="var(--color-mobile)" radius={4} />
          </BarChart>
        </ChartContainer> */}

        </div>
      </div>
    </div>
    </>
  )
}

export default App



import React, { useEffect, useMemo, useState, useCallback } from 'react';
import { CloudSnow } from 'lucide-react';
import './App.css';
import { LineChart, Line, XAxis, YAxis, ResponsiveContainer } from "recharts";
import { ChartConfig, ChartContainer } from "@/components/ui/chart";
import { ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { ChartLegend, ChartLegendContent } from "@/components/ui/chart";
import Papa from 'papaparse';
import Tab from './components/Tab/Tab';

import { AxisOptions, Chart } from "react-charts";

interface Temp {
  date: string;
  value: number;
}

const fetchData = async (): Promise<Temp[]> => {
  const response = await fetch('src/csv/20240730_temperature.csv');
  const csv = await response.text();
  const results = Papa.parse<Temp>(csv, {
    dynamicTyping: true,
    delimiter: ";",
    header: true,
    skipEmptyLines: true
  });
  console.log(results)
  return results.data;
};

const chartConfig = {
  temp: {
    label: "Temperature",
    color: "#2563eb",
  },
} satisfies ChartConfig;

interface TabData {
  title: string;
  value: string;
}

const tabs: TabData[] = [
  { title: 'Tab 2', value: 'tab2' },
  { title: 'Tab 3', value: 'tab3' },
];

const ChartR = React.memo(({ data }: { data: Temp[] }) => (
  <ChartContainer config={chartConfig} className="h-full lg:h-[550px] w-full">
    <ResponsiveContainer width="100%" height="100%">
      <LineChart 
        data={data}
        margin={{ left: 12, right: 12 }}
      >
        <XAxis
          dataKey="date"
          tickMargin={8}
          //tickFormatter={(value) => value.slice(0, 4)}
        />
        <YAxis type="number" />
        <ChartTooltip
          cursor={false}
          content={<ChartTooltipContent />}
        />
        <ChartLegend content={<ChartLegendContent nameKey="temp" />} />
        <Line
          dataKey="value"
          type="linear"
          stroke="var(--color-temp)"
          strokeWidth={2}
          dot={false}
        />
      </LineChart>
    </ResponsiveContainer>
  </ChartContainer>
));

const ChartL = React.memo(({ data }: { data: Temp[] }) => {
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);

  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const visibleData = useMemo(() => {
    const dataPoints = Math.floor(windowWidth / 5); // Adjust this value to change data density
    const step = Math.ceil(data.length / dataPoints);
    return data.filter((_, index) => index % step === 0);
  }, [data, windowWidth]);

  return (
    <ChartContainer config={chartConfig} className="h-full lg:h-[550px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={visibleData} margin={{ left: 12, right: 12 }}>
          <XAxis 
            dataKey="date" 
            tickMargin={8}
            tickFormatter={(value) => format(new Date(value), 'MMM dd')}
            interval="preserveStartEnd"
          />
          <YAxis type="number" />
          <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
          <ChartLegend content={<ChartLegendContent nameKey="temp" />} />
          <Line dataKey="value" type="linear" stroke="var(--color-temp)" strokeWidth={2} dot={false} />
        </LineChart>
      </ResponsiveContainer>
    </ChartContainer>
  );
});

function App() {
  const [activeTab, setActiveTab] = useState("tab2");
  const [loading, setLoading] = useState<boolean>(true);
  const [data, setData] = useState<Temp[]>([]);

  const handleTabClick = useCallback((value: string) => {
    setActiveTab(value);
  }, []);

  const memoizedData = useMemo(() => {
    // Here you can add logic to filter or transform data based on activeTab
    // For now, we're just returning the full dataset
    return data;
  }, [data]);

  useEffect(() => {
    fetchData()
      .then(fetchedData => setData(fetchedData))
      .catch(error => console.error(error))
      .finally(() => setLoading(false));
  }, []);

 type MyDatum = { date: Date, stars: number }
  const dataL = [
    {
      label: 'React Charts',
      data: [
        {
          date: new Date(),
          stars: 23467238,
        },
      ],
    },
  ]

  const primaryAxis = React.useMemo(
    (): AxisOptions<MyDatum> => ({
      getValue: datum => datum.date,
    }),
    []
  )

  const secondaryAxes = React.useMemo(
    (): AxisOptions<MyDatum>[] => [
      {
        getValue: datum => datum.stars,
      },
    ],
    []
  )

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-xl font-semibold">Loading data...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-200">
      <div className="w-full bg-white">
        <div className="flex px-2 py-4">
          <CloudSnow /> 
          <div className="ml-2">Station météo</div>
        </div>
      </div>

      <div className="w-full bg-white flex">
        {tabs.map((tab) => (
          <Tab
            key={tab.value}
            title={tab.title}
            enable={activeTab === tab.value}
            onClick={() => handleTabClick(tab.value)}
          />
        ))}
      </div>

      <div className="flex-grow flex justify-center items-center">
        <div className="p-4 bg-white w-full lg:w-4/6 rounded-xl">
          <ChartL data={memoizedData} />

        </div>
      </div>
    </div>
  );
}

export default App;